int arr[1000], tmp[1000];

void merge(int s1, int l1, int s2, int l2) {
   
    int i, j, k;
    i = 0;
    j = 0;
    k = s1;
    printf("s1:", s1);
    printf("l1:", l1);
    printf("s2:", s2);
    printf("l2:", l2);
    while (i < l1) {
        if (j < l2) {
            if (arr[s1 + i] > arr[s2 + j]) {
                tmp[k] = arr[s2 + j];
                j = j + 1;
            } else {
                tmp[k] = arr[s1 + i];
                i = i + 1;
            }
            k = k + 1;
        } else {
            while (i < l1) {
                tmp[k] = arr[s1 + i];
                k = k + 1;
                i = i + 1;
            }
        }
    }
    while (j < l2) {
        tmp[k] = arr[s2 + j];
        k = k + 1;
        j = j + 1;
    }
    for (i = s1; i < k; i = i + 1) arr[i] = tmp[i];
}

void inner_merge_sort(int start, int length) {
    int tmp, mid;
    printf("start:", start);
    printf("length:", length);
    if (length <= 1) return;
    if (length == 2) {
        if (arr[start] > arr[start + 1]) {
            tmp = arr[start];
            arr[start] = arr[start + 1];
            arr[start + 1] = tmp;
        }
        return;
    }
    mid = length / 2;
    inner_merge_sort(start, mid);
    inner_merge_sort(start + mid, length - mid);
    merge(start, mid, start + mid, length - mid);
}

void main() {
    int n, i, a;
    n = 100;
    arr[0]=-1356253859;
    arr[1]=1022443897;
    arr[2]=868406047;
    arr[3]=-1126064183;
    arr[4]=-856255823;
    arr[5]=1087024323;
    arr[6]=718231990;
    arr[7]=325861832;
    arr[8]=410399194;
    arr[9]=1039056190;
    arr[10]=-694038852;
    arr[11]=-101221584;
    arr[12]=1330886742;
    arr[13]=544176914;
    arr[14]=-670149608;
    arr[15]=345916842;
    arr[16]=372668105;
    arr[17]=1267515485;
    arr[18]=-647076291;
    arr[19]=92816720;
    arr[20]=-61140781;
    arr[21]=1070707071;
    arr[22]=-582703511;
    arr[23]=-428937743;
    arr[24]=-490122052;
    arr[25]=1106246043;
    arr[26]=-1565839085;
    arr[27]=-1293890462;
    arr[28]=887630899;
    arr[29]=751477012;
    arr[30]=-433312950;
    arr[31]=-1808922177;
    arr[32]=-1829212702;
    arr[33]=-967054341;
    arr[34]=-399955390;
    arr[35]=315346188;
    arr[36]=305603422;
    arr[37]=195995040;
    arr[38]=635138515;
    arr[39]=-449404408;
    arr[40]=377175743;
    arr[41]=-1039144441;
    arr[42]=-485617552;
    arr[43]=723867963;
    arr[44]=1212218845;
    arr[45]=619494638;
    arr[46]=-1722228467;
    arr[47]=718261050;
    arr[48]=416649418;
    arr[49]=414720781;
    arr[50]=-1123030912;
    arr[51]=-444402143;
    arr[52]=-31363419;
    arr[53]=-1094527580;
    arr[54]=-481349807;
    arr[55]=748791559;
    arr[56]=-887090351;
    arr[57]=854646242;
    arr[58]=1671579510;
    arr[59]=-970694557;
    arr[60]=906375532;
    arr[61]=-632263045;
    arr[62]=-1540627457;
    arr[63]=-72326810;
    arr[64]=-162795286;
    arr[65]=-1107284011;
    arr[66]=-1075022708;
    arr[67]=44229959;
    arr[68]=347390391;
    arr[69]=-502611032;
    arr[70]=-446745959;
    arr[71]=-238133479;
    arr[72]=-44172356;
    arr[73]=-559060565;
    arr[74]=47543322;
    arr[75]=216238214;
    arr[76]=266528608;
    arr[77]=138065918;
    arr[78]=-330026827;
    arr[79]=-250593240;
    arr[80]=408133080;
    arr[81]=368835336;
    arr[82]=-762079757;
    arr[83]=374207892;
    arr[84]=-637232325;
    arr[85]=-548648780;
    arr[86]=117777387;
    arr[87]=-270330946;
    arr[88]=-170269495;
    arr[89]=-446471463;
    arr[90]=-211662985;
    arr[91]=-1316290968;
    arr[92]=-646258081;
    arr[93]=928250421;
    arr[94]=1034997706;
    arr[95]=678376627;
    arr[96]=1467263577;
    arr[97]=776241157;
    arr[98]=1460277259;
    arr[99]=290494455;
    inner_merge_sort(0, 100);
    for (i = 0; i < n; i = i + 1) printf(arr[i]);
} 


